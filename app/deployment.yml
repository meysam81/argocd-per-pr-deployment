---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pod-reader
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
  - kind: ServiceAccount
    name: pod-reader
    namespace: default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: nginx
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx:1-alpine
        name: nginx
        resources: {}
      serviceAccountName: pod-reader
      initContainers:
      - image: bitnami/kubectl
        name: kubectl
        command: ["sh", "-c"]
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        args:
          - |
            sha=$(kubectl get po/$POD_NAME -n $POD_NAMESPACE -o jsonpath='{.metadata.annotations.github-sha}')
            echo $sha > /datashare/sha
            branch=$(kubectl get po/$POD_NAME -n $POD_NAMESPACE -o jsonpath='{.metadata.annotations.branch-name}')
            echo $branch > /datashare/branch
            cat /datashare/*
        volumeMounts:
          - name: datashare
            mountPath: /datashare
      - image: alpine/git
        name: git
        command: ["sh", "-c"]
        args:
          - |
            branch=$(cat /datashare/branch)
            git clone -b $branch --depth 1 https://github.com/meysam81/argocd-per-pr-deployment
            ls -lha argocd-per-pr-deployment
            cat argocd-per-pr-deployment/*
        resources: {}
        volumeMounts:
          - name: datashare
            mountPath: /datashare
            readOnly: true
      volumes:
        - name: datashare
          emptyDir: {}
